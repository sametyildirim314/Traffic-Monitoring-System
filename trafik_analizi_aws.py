# aws_iot_traffic_analyzer.py

from dotenv import load_dotenv
load_dotenv()
import asyncio
import json
import requests
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import logging
from typing import Dict, List, Optional
from dataclasses import dataclass
import time
import sqlite3
import os
from threading import Thread
import ssl

# AWS IoT Core iÃ§in gerekli kÃ¼tÃ¼phaneler
from awscrt import io, mqtt, auth, http
from awsiot import mqtt_connection_builder
import uuid

# Logging yapÄ±landÄ±rmasÄ±
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class TrafficData:
    intersection_id: int
    name: str
    lat: float
    lng: float
    density: float
    avg_speed: int
    wait_time: int
    vehicle_count: int
    status: str
    timestamp: datetime

class AWSIoTTrafficAnalyzer:
    def __init__(self, google_maps_api_key: str = None):
        self.api_key = google_maps_api_key
        self.intersections = [
            {"id": 1, "name": "KÄ±zÄ±lay MeydanÄ±", "lat": 39.9208, "lng": 32.8541, "type": "major"},
            {"id": 2, "name": "TandoÄŸan KavÅŸaÄŸÄ±", "lat": 39.9347, "lng": 32.8197, "type": "major"},
            {"id": 3, "name": "KuÄŸulu Park KavÅŸaÄŸÄ±", "lat": 39.9019, "lng": 32.8597, "type": "medium"},
            {"id": 4, "name": "TunalÄ± Hilmi Caddesi", "lat": 39.9089, "lng": 32.8486, "type": "medium"},
            {"id": 5, "name": "Ã‡ankaya Caddesi", "lat": 39.9153, "lng": 32.8625, "type": "medium"},
            {"id": 6, "name": "AtatÃ¼rk BulvarÄ± - SÄ±hhiye", "lat": 39.9294, "lng": 32.8597, "type": "major"},
            {"id": 7, "name": "GMK BulvarÄ± - Maltepe", "lat": 39.9256, "lng": 32.8378, "type": "medium"},
            {"id": 8, "name": "BahÃ§elievler KavÅŸaÄŸÄ±", "lat": 39.9133, "lng": 32.8264, "type": "medium"}
        ]
        
        # AWS IoT Core ayarlarÄ±
        self.aws_iot_endpoint = os.getenv('AWS_IOT_ENDPOINT')
        self.cert_path = os.getenv('AWS_IOT_CERT_PATH', './certs/device.pem.crt')
        self.private_key_path = os.getenv('AWS_IOT_PRIVATE_KEY_PATH', './certs/private.pem.key')
        self.ca_path = os.getenv('AWS_IOT_CA_PATH', './certs/Amazon-root-CA-1.pem')
        self.thing_name = os.getenv('AWS_IOT_THING_NAME', 'AnkaraTrafficSystem')
        
        self.connection = None
        self.setup_database()
        self.setup_aws_iot_connection()
        
    def setup_database(self):
        """SQLite veritabanÄ±nÄ± kurulum"""
        conn = sqlite3.connect('traffic_data.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS traffic_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                intersection_id INTEGER,
                name TEXT,
                lat REAL,
                lng REAL,
                density REAL,
                avg_speed INTEGER,
                wait_time INTEGER,
                vehicle_count INTEGER,
                status TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                aws_message_id TEXT
            )
        ''')
        
        # AWS IoT mesaj loglarÄ± iÃ§in tablo
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS aws_iot_messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                topic TEXT,
                message TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                status TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("VeritabanÄ± hazÄ±rlandÄ±")

    def setup_aws_iot_connection(self):
        """AWS IoT Core baÄŸlantÄ±sÄ±nÄ± kur"""
        try:
            if not all([self.aws_iot_endpoint, os.path.exists(self.cert_path), 
                       os.path.exists(self.private_key_path), os.path.exists(self.ca_path)]):
                logger.warning("AWS IoT sertifikalarÄ± bulunamadÄ±, yerel MQTT kullanÄ±lacak")
                return False

            # Event loop ve host resolver
            event_loop_group = io.EventLoopGroup(1)
            host_resolver = io.DefaultHostResolver(event_loop_group)
            client_bootstrap = io.ClientBootstrap(event_loop_group, host_resolver)

            # MQTT baÄŸlantÄ±sÄ± oluÅŸtur
            self.connection = mqtt_connection_builder.mtls_from_path(
                endpoint=self.aws_iot_endpoint,
                cert_filepath=self.cert_path,
                pri_key_filepath=self.private_key_path,
                client_bootstrap=client_bootstrap,
                ca_filepath=self.ca_path,
                client_id=self.thing_name,
                clean_session=False,
                keep_alive_secs=6
            )

            logger.info("AWS IoT Core baÄŸlantÄ±sÄ± hazÄ±rlandÄ±")
            return True

        except Exception as e:
            logger.error(f"AWS IoT baÄŸlantÄ± kurulumu hatasÄ±: {e}")
            return False

    def connect_to_aws_iot(self):
        """AWS IoT Core'a baÄŸlan"""
        try:
            if not self.connection:
                return False

            connect_future = self.connection.connect()
            connect_future.result()
            logger.info("âœ… AWS IoT Core'a baÅŸarÄ±yla baÄŸlandÄ±")

            # Komut topic'ine abone ol
            subscribe_future, packet_id = self.connection.subscribe(
                topic=f"ankara-traffic/commands/{self.thing_name}",
                qos=mqtt.QoS.AT_LEAST_ONCE,
                callback=self.on_aws_message_received
            )
            subscribe_future.result()
            logger.info(f"ğŸ“¡ AWS IoT topic'ine abone olundu: ankara-traffic/commands/{self.thing_name}")
            return True

        except Exception as e:
            logger.error(f"AWS IoT baÄŸlantÄ± hatasÄ±: {e}")
            return False

    def on_aws_message_received(self, topic, payload, dup, qos, retain, **kwargs):
        """AWS IoT'den mesaj alÄ±ndÄ±ÄŸÄ±nda Ã§alÄ±ÅŸÄ±r"""
        try:
            message = json.loads(payload.decode('utf-8'))
            logger.info(f"ğŸ“¨ AWS IoT'den mesaj alÄ±ndÄ±: {topic}")
            logger.info(f"ğŸ’¬ Mesaj iÃ§eriÄŸi: {message}")
            
            # MesajÄ± veritabanÄ±na kaydet
            self.save_aws_message_to_db(topic, message)
            
            # Ã–zel komutlarÄ± iÅŸle
            if message.get('command') == 'update_analysis':
                logger.info("ğŸ”„ AWS'den analiz gÃ¼ncelleme komutu alÄ±ndÄ±")
                # Hemen analiz yap ve gÃ¶nder
                Thread(target=self.immediate_analysis).start()
                
        except Exception as e:
            logger.error(f"AWS mesaj iÅŸleme hatasÄ±: {e}")

    def save_aws_message_to_db(self, topic: str, message: dict):
        """AWS IoT mesajÄ±nÄ± veritabanÄ±na kaydet"""
        try:
            conn = sqlite3.connect('traffic_data.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO aws_iot_messages (topic, message, status)
                VALUES (?, ?, ?)
            ''', (topic, json.dumps(message), 'received'))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"AWS mesaj kaydetme hatasÄ±: {e}")

    def publish_to_aws_iot(self, topic: str, message: dict):
        """AWS IoT Core'a mesaj gÃ¶nder"""
        try:
            if not self.connection:
                logger.warning("AWS IoT baÄŸlantÄ±sÄ± yok, mesaj gÃ¶nderilemedi")
                return False

            message_json = json.dumps(message, ensure_ascii=False, default=str)
            
            publish_future, packet_id = self.connection.publish(
                topic=topic,
                payload=message_json,
                qos=mqtt.QoS.AT_LEAST_ONCE
            )
            
            publish_future.result()
            logger.info(f"ğŸ“¤ AWS IoT'ye mesaj gÃ¶nderildi: {topic}")
            
            # BaÅŸarÄ±lÄ± gÃ¶nderimi veritabanÄ±na kaydet
            self.save_aws_message_to_db(topic, {"status": "published", "message": message})
            return True
            
        except Exception as e:
            logger.error(f"AWS IoT mesaj gÃ¶nderme hatasÄ±: {e}")
            return False

    def calculate_traffic_density(self, intersection_type: str) -> float:
        """Zaman bazlÄ± trafik yoÄŸunluÄŸu hesaplama"""
        current_hour = datetime.now().hour
        current_minute = datetime.now().minute
        
        # Hafta iÃ§i/hafta sonu kontrolÃ¼
        is_weekend = datetime.now().weekday() >= 5
        
        # Temel trafik yoÄŸunluÄŸu
        base_traffic = np.random.uniform(0.1, 0.3)
        
        # Zirve saat Ã§arpanlarÄ±
        peak_multiplier = 1.0
        
        if not is_weekend:
            # Sabah zirvesi (07:00-09:30)
            if 7 <= current_hour <= 9 or (current_hour == 9 and current_minute <= 30):
                peak_multiplier = 2.8 if intersection_type == "major" else 2.2
            # AkÅŸam zirvesi (17:00-19:30)
            elif 17 <= current_hour <= 19 or (current_hour == 19 and current_minute <= 30):
                peak_multiplier = 3.2 if intersection_type == "major" else 2.5
            # Ã–ÄŸle arasÄ± (12:00-14:00)
            elif 12 <= current_hour <= 14:
                peak_multiplier = 1.8
            # Normal Ã§alÄ±ÅŸma saatleri
            elif 10 <= current_hour <= 16:
                peak_multiplier = 1.4
        else:
            # Hafta sonu daha dÃ¼ÅŸÃ¼k trafik
            if 11 <= current_hour <= 15:
                peak_multiplier = 1.6
            elif 19 <= current_hour <= 22:
                peak_multiplier = 1.3
        
        return min(base_traffic * peak_multiplier, 1.0)

    def get_google_maps_traffic_data(self, lat: float, lng: float) -> Dict:
        """Google Maps Distance Matrix API ile trafik sÃ¼resi verisi Ã§ekme"""
        if not self.api_key:
            logger.warning("Google Maps API key bulunamadÄ±, simÃ¼le edilmiÅŸ veri kullanÄ±lacak")
            return None

        try:
            # Test iÃ§in sabit bir hedef nokta (Ã¶rnek: TandoÄŸan KavÅŸaÄŸÄ±)
            destination = "39.9347,32.8197"
            origin = f"{lat},{lng}"

            url = "https://maps.googleapis.com/maps/api/distancematrix/json"
            params = {
                'origins': origin,
                'destinations': destination,
                'departure_time': 'now',
                'key': self.api_key
            }

            response = requests.get(url, params=params, timeout=10)

            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"Distance Matrix API hatasÄ±: {response.status_code}")
                return None

        except Exception as e:
            logger.error(f"Distance Matrix API Ã§aÄŸrÄ±sÄ±nda hata: {e}")
            return None

    def analyze_traffic_data(self) -> List[TrafficData]:
        """TÃ¼m kavÅŸaklar iÃ§in trafik analizi"""
        traffic_data_list = []

        for intersection in self.intersections:
            maps_data = self.get_google_maps_traffic_data(
                intersection['lat'], 
                intersection['lng']
            )
        
            # Trafik yoÄŸunluÄŸunu hesapla
            density = self.calculate_traffic_density(intersection['type'])
        
            # VarsayÄ±lanlar (simÃ¼le)
            avg_speed = max(15, int(60 - (density * 45)))  # 15-60 km/h
            wait_time = int(density * 180)
        
            # EÄŸer gerÃ§ek trafik verisi geldiyse, kullan
            if maps_data and maps_data.get("rows"):
                try:
                    element = maps_data["rows"][0]["elements"][0]
                    if "duration_in_traffic" in element:
                        duration_sec = element["duration_in_traffic"]["value"]
                        distance_m = element["distance"]["value"]
                        distance_km = distance_m / 1000
        
                        if duration_sec > 0 and distance_km > 0:
                            avg_speed = int((distance_km / (duration_sec / 3600)))  # km/h
                            wait_time = int(duration_sec % 180)
        
                        logger.info(f"âœ… {intersection['name']}: {distance_km:.1f} km, {duration_sec}s, {avg_speed} km/h")
        
                except Exception as e:
                    logger.warning(f"Trafik sÃ¼resi ayrÄ±ÅŸtÄ±rÄ±lamadÄ±: {e}")
        
            # Durum belirleme
            if density > 0.7:
                status = "critical"
            elif density > 0.4:
                status = "moderate"
            else:
                status = "normal"
        
            traffic_data = TrafficData(
                intersection_id=intersection['id'],
                name=intersection['name'],
                lat=intersection['lat'],
                lng=intersection['lng'],
                density=round(density * 100, 1),
                avg_speed=avg_speed,
                wait_time=wait_time,
                vehicle_count=int(density * 150 + np.random.uniform(10, 50)),
                status=status,
                timestamp=datetime.now()
            )
        
            traffic_data_list.append(traffic_data)

        return traffic_data_list

    def save_to_database(self, traffic_data_list: List[TrafficData]):
        """Verileri veritabanÄ±na kaydet"""
        conn = sqlite3.connect('traffic_data.db')
        cursor = conn.cursor()
        
        for data in traffic_data_list:
            # AWS mesaj ID'si oluÅŸtur
            aws_message_id = str(uuid.uuid4())
            
            cursor.execute('''
                INSERT INTO traffic_logs 
                (intersection_id, name, lat, lng, density, avg_speed, wait_time, vehicle_count, status, timestamp, aws_message_id)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                data.intersection_id, data.name, data.lat, data.lng,
                data.density, data.avg_speed, data.wait_time, 
                data.vehicle_count, data.status, data.timestamp, aws_message_id
            ))
        
        conn.commit()
        conn.close()
        logger.info(f"{len(traffic_data_list)} veri kaydedildi")

    def send_traffic_data_to_aws(self, traffic_data_list: List[TrafficData]):
        """Trafik verilerini AWS IoT Core'a gÃ¶nder"""
        try:
            # Ana veri paketi
            aws_payload = {
                'deviceId': self.thing_name,
                'timestamp': datetime.now().isoformat(),
                'location': 'Ankara, Turkey',
                'systemStatus': 'active',
                'dataType': 'traffic_analysis',
                'intersections': []
            }

            # Her kavÅŸak iÃ§in veri hazÄ±rla
            for data in traffic_data_list:
                intersection_data = {
                    'intersectionId': data.intersection_id,
                    'name': data.name,
                    'coordinates': {
                        'latitude': data.lat,
                        'longitude': data.lng
                    },
                    'metrics': {
                        'density': data.density,
                        'averageSpeed': data.avg_speed,
                        'waitTime': data.wait_time,
                        'vehicleCount': data.vehicle_count
                    },
                    'status': data.status,
                    'timestamp': data.timestamp.isoformat(),
                    'alerts': []
                }

                # Kritik durum uyarÄ±larÄ±
                if data.status == 'critical':
                    intersection_data['alerts'].append({
                        'type': 'HEAVY_TRAFFIC',
                        'message': f'YoÄŸun trafik: {data.name}',
                        'severity': 'HIGH'
                    })

                aws_payload['intersections'].append(intersection_data)

            # AWS IoT'ye ana veri gÃ¶nder
            main_topic = f"ankara-traffic/data/{self.thing_name}"
            self.publish_to_aws_iot(main_topic, aws_payload)

            # Kritik durumlar iÃ§in Ã¶zel alert topic
            critical_intersections = [d for d in traffic_data_list if d.status == 'critical']
            if critical_intersections:
                alert_payload = {
                    'alertType': 'TRAFFIC_CONGESTION',
                    'severity': 'HIGH',
                    'timestamp': datetime.now().isoformat(),
                    'affectedIntersections': [
                        {
                            'id': data.intersection_id,
                            'name': data.name,
                            'density': data.density
                        }
                        for data in critical_intersections
                    ],
                    'recommendedAction': 'Consider alternative routes'
                }
                
                alert_topic = f"ankara-traffic/alerts/{self.thing_name}"
                self.publish_to_aws_iot(alert_topic, alert_payload)

            logger.info(f"ğŸ“¤ {len(traffic_data_list)} kavÅŸak verisi AWS IoT'ye gÃ¶nderildi")

        except Exception as e:
            logger.error(f"AWS IoT veri gÃ¶nderme hatasÄ±: {e}")

    def immediate_analysis(self):
        """AWS'den komut geldiÄŸinde hemen analiz yap"""
        try:
            logger.info("ğŸš€ AWS komutu Ã¼zerine hÄ±zlÄ± analiz baÅŸlatÄ±lÄ±yor...")
            traffic_data = self.analyze_traffic_data()
            self.save_to_database(traffic_data)
            self.send_traffic_data_to_aws(traffic_data)
            
            # Node.js API iÃ§in JSON export
            self.export_to_json(traffic_data)
            
        except Exception as e:
            logger.error(f"HÄ±zlÄ± analiz hatasÄ±: {e}")

    def export_to_json(self, traffic_data_list: List[TrafficData]):
        """Node.js API iÃ§in JSON dosyalarÄ±nÄ± oluÅŸtur"""
        try:
            # Ana trafik verileri
            export_data = {
                'timestamp': datetime.now().isoformat(),
                'source': 'AWS_IoT_Core',
                'intersections': [
                    {
                        'id': data.intersection_id,
                        'name': data.name,
                        'lat': data.lat,
                        'lng': data.lng,
                        'density': data.density,
                        'avgSpeed': data.avg_speed,
                        'waitTime': data.wait_time,
                        'vehicleCount': data.vehicle_count,
                        'status': data.status
                    }
                    for data in traffic_data_list
                ]
            }
            
            with open('current_traffic_data.json', 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
                
            logger.info("ğŸ“„ JSON verileri gÃ¼ncellendi")
            
        except Exception as e:
            logger.error(f"JSON export hatasÄ±: {e}")

    def get_historical_data(self, hours: int = 24) -> pd.DataFrame:
        """GeÃ§miÅŸ verileri getir"""
        conn = sqlite3.connect('traffic_data.db')
        
        query = '''
            SELECT * FROM traffic_logs 
            WHERE timestamp >= datetime('now', '-{} hours')
            ORDER BY timestamp DESC
        '''.format(hours)
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        return df

    def disconnect_aws_iot(self):
        """AWS IoT baÄŸlantÄ±sÄ±nÄ± kapat"""
        try:
            if self.connection:
                disconnect_future = self.connection.disconnect()
                disconnect_future.result()
                logger.info("AWS IoT baÄŸlantÄ±sÄ± kapatÄ±ldÄ±")
        except Exception as e:
            logger.error(f"AWS IoT baÄŸlantÄ± kapatma hatasÄ±: {e}")

def main():
    """Ana uygulama dÃ¶ngÃ¼sÃ¼"""
    # Ã‡evre deÄŸiÅŸkenlerini al
    api_key = os.getenv('GOOGLE_MAPS_API_KEY')
    
    analyzer = AWSIoTTrafficAnalyzer(api_key)
    
    # AWS IoT'ye baÄŸlan
    aws_connected = analyzer.connect_to_aws_iot()
    
    if aws_connected:
        logger.info("ğŸš€ AWS IoT Core ile Ankara Trafik Sistemi baÅŸlatÄ±ldÄ±")
   
    
    try:
        while True:
            # Trafik verilerini analiz et
            traffic_data = analyzer.analyze_traffic_data()
            
            # VeritabanÄ±na kaydet
            analyzer.save_to_database(traffic_data)
            
            # AWS IoT'ye gÃ¶nder (baÄŸlantÄ± varsa)
            if aws_connected:
                analyzer.send_traffic_data_to_aws(traffic_data)
            
            # JSON export (Node.js API iÃ§in)
            analyzer.export_to_json(traffic_data)
            
            logger.info("ğŸ”„ Trafik verileri gÃ¼ncellendi ve AWS'ye gÃ¶nderildi")
            
            # 30 saniye bekle
            time.sleep(20)
            
    except KeyboardInterrupt:
        logger.info("ğŸ›‘ Sistem kapatÄ±lÄ±yor...")
        analyzer.disconnect_aws_iot()
    except Exception as e:
        logger.error(f"Ana dÃ¶ngÃ¼de hata: {e}")
        analyzer.disconnect_aws_iot()

if __name__ == "__main__":
    main()